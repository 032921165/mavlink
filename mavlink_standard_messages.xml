<?xml version="1.0"?>
<mavlink>
<messages>
   <message name="HEARTBEAT" id="0">
     The heartbeat message shows that a system is present and responding. The type of the MAV and Autopilot hardware allow the receiving system to treat further messages from this system appropriate (e.g. by laying out the user interface based on the autopilot).
     <field name="type" type="uint8_t">Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE ENUM)</field>
     <field name="autopilot" type="uint8_t">Type of the Autopilot: 0: Generic, 1: PIXHAWK, 2: SLUGS, 3: Ardupilot (up to 15 types), defined in MAV_AUTOPILOT_TYPE ENUM</field>
   </message>
 
   <message name="BOOT" id="1">
	The boot message indicates that a system is starting. The onboard software version allows to keep track of onboard soft/firmware revisions.
     <field name="version" type="uint32_t">The onboard software version</field>
   </message>

   <message name="SYSTEM_TIME" id="2">
     The system time is the time of the master clock, typically the computer clock of the main onboard computer.
     <field name="time_usec" type="uint64_t">Timestamp of the master clock in microseconds since UNIX epoch.</field>
   </message>

   <message name="PING" id="3">
     A ping message either requesting or responding to a ping. This allows to measure the system latencies, including serial port, radio modem and UDP connections.
     <field name="seq" type="uint32_t">PING sequence</field>
     <field name="target_system" type="uint8_t">0: request ping from all receiving systems, if greater than 0: message is a ping response and number is the system id of the requesting system</field>
     <field name="target_component" type="uint8_t">0: request ping from all receiving components, if greater than 0: message is a ping response and number is the system id of the requesting system</field>
     <field name="time" type="uint64_t">Unix timestamp in microseconds</field>
   </message>

   <message name="ACTION" id="10">
	An action message allows to execute a certain onboard action. These include liftoff, land, storing parameters too EEPROM, shutddown, etc. The action ids are defined in ENUM MAV_ACTION in mavlink/include/mavlink_types.h
     <field name="target" type="uint8_t">The system executing the action</field>
     <field name="target_component" type="uint8_t">The component executing the action</field>
     <field name="action" type="uint8_t">The action id</field>
   </message>

   <message name="ACTION_ACK" id="62">
	This message acknowledges an action. IMPORTANT: The acknowledgement can be also negative, e.g. the MAV rejects a reset message because it is in-flight. The action ids are defined in ENUM MAV_ACTION in mavlink/include/mavlink_types.h
     <field name="action" type="uint8_t">The action id</field>
     <field name="action" type="uint8_t">0: Action DENIED, 1: Action executed</field>
   </message>

   <message name="SET_MODE" id="11">
   Set the system mode, as defined by enum MAV_MODE in mavlink/include/mavlink_types.h. There is no target component id as the mode is by definition for the overall aircraft, not only for one component.
     <field name="target" type="uint8_t">The system setting the mode</field>
     <field name="mode" type="uint8_t">The new mode</field>
   </message>

   <message name="SET_NAV_MODE" id="12">
   Set the system navigation mode, as defined by enum MAV_NAV_MODE in mavlink/include/mavlink_types.h. The navigation mode applies to the whole aircraft and thus all components.
     <field name="target" type="uint8_t">The system setting the mode</field>
     <field name="nav_mode" type="uint8_t">The new navigation mode</field>
   </message>
   
   <message name="PARAM_REQUEST_READ" id="20">
     Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="param_id" type="array[15]">Onboard parameter id</field>
   </message>

   <message name="PARAM_REQUEST_LIST" id="21">
     Request all parameters of this component. After his request, all parameters are emitted.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
   </message>

   <message name="PARAM_VALUE" id="22">
     Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout.
     <field name="param_id" type="array[15]">Onboard parameter id</field>
     <field name="param_value" type="float">Onboard parameter value</field>
     <field name="param_count" type="uint16_t">Total number of onboard parameters</field>
     <field name="param_index" type="uint16_t">Index of this onboard parameter</field>
   </message>

   <message name="PARAM_SET" id="23">
     Set a parameter value TEMPORARILY to RAM. It will be reset to default on system reboot. Send the ACTION MAV_ACTION_STORAGE_WRITE to PERMANENTLY write the RAM contents to EEPROM. IMPORTANT: The receiving component should acknowledge the new parameter value by sending a param_value message to all communication partners. This will also ensure that multiple GCS all have an up-to-date list of all parameters. If the sending GCS did not receive a PARAM_VALUE message within its timeout time, it should re-send the PARAM_SET message.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="param_id" type="array[15]">Onboard parameter id</field>
     <field name="param_value" type="float">Onboard parameter value</field>
   </message>

<!-- Obsolete, replaced by MAV_ACTION_STORAGE_WRITE
   <message name="PARAM_WRITE_STORAGE" id="24">
     Set the current parameter value (currently active in RAM) PERMANTLY to EEPROM/HDD. It will be the new default value.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
   </message>-->

   <message name="PID_SET" id="25">
     Set PID values. FIXME This message could be also replaced by onboard parameters?
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="pid_id" type="uint8_t">PID ID</field>
     <field name="k_p" type="float">P</field>
     <field name="k_i" type="float">I</field>
     <field name="k_d" type="float">D</field>
   </message>

   <message name="RAW_IMU" id="28">
     The RAW IMU readings for the usual 9DOF sensor setup. This message should always contain the true raw values without any scaling to allow data capture and system debugging.
     <field name="usec"  type="uint64_t">Timestamp (microseconds since UNIX epoch)</field>
     <field name="xacc"  type="int16_t">X acceleration (mg raw)</field>
     <field name="yacc"  type="int16_t">Y acceleration (mg raw)</field>
     <field name="zacc"  type="int16_t">Z acceleration (mg raw)</field>
     <field name="xgyro" type="uint16_t">Angular speed around X axis (adc units)</field>
     <field name="ygyro" type="uint16_t">Angular speed around Y axis (adc units)</field>
     <field name="zgyro" type="uint16_t">Angular speed around Z axis (adc units)</field>
     <field name="xmag"  type="int16_t">X Magnetic field (milli tesla)</field>
     <field name="ymag"  type="int16_t">Y Magnetic field (milli tesla)</field>
     <field name="zmag"  type="int16_t">Z Magnetic field (milli tesla)</field>
   </message>

  <message name="RAW_PRESSURE" id="29">
     The RAW pressure readings for the typical setup of one absolute pressure and one differential pressure sensor. The sensor values should be the raw, unscaled ADC values.
     <field name="usec"  type="uint64_t">Timestamp (microseconds since UNIX epoch)</field>
     <field name="press_abs"  type="int32_t">Absolute pressure (hectopascal)</field>
     <field name="press_diff1"  type="int32_t">Differential pressure 1 (hectopascal)</field>
     <field name="press_diff2"  type="int32_t">Differential pressure 2 (hectopascal)</field>
   </message>

   <message name="ATTITUDE" id="30">
    The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right).
     <field name="usec"  type="uint64_t">Timestamp (microseconds)</field>
     <field name="roll"  type="float">Roll angle (rad)</field>
     <field name="pitch" type="float">Pitch angle (rad)</field>
     <field name="yaw"   type="float">Yaw angle (rad)</field>
     <field name="rollspeed"  type="float">Roll angular speed (rad/s)</field>
     <field name="pitchspeed" type="float">Pitch angular speed (rad/s)</field>
     <field name="yawspeed"   type="float">Yaw angular speed (rad/s)</field>
   </message>

   <message name="LOCAL_POSITION" id="31">
     The filtered local position (e.g. fused computer vision and accelerometers).
     <field name="usec" type="uint64_t">Timestamp (microseconds since unix epoch)</field>
     <field name="x"   type="float">X Position</field>
     <field name="y"   type="float">Y Position</field>
     <field name="z"   type="float">Z Position</field>
     <field name="roll"  type="float">Roll</field>
     <field name="pitch"  type="float">Pitch</field>
     <field name="yaw"  type="float">Yaw</field>
   </message>

   <message name="GPS_RAW" id="32">
     The global position, as returned by the Global Positioning System (GPS). This is
NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate.
     <field name="usec" type="uint64_t">Timestamp (microseconds since unix epoch)</field>
     <field name="fix_type" type="uint8_t">0-1: no fix, 2: 2D fix, 3: 3D fix</field>
     <field name="lat"   type="float">X Position</field>
     <field name="lon"   type="float">Y Position</field>
     <field name="alt"   type="float">Z Position in meters</field>
     <field name="eph"  type="float">Uncertainty in meters of latitude</field>
     <field name="epv"  type="float">Uncertainty in meters of longitude</field>
     <field name="v"  type="float">Overall speed</field>
     <field name="hdg"  type="float">Heading, in FIXME</field>
   </message>

   <message name="GPS_STATUS" id="27">
     The global position, as returned by the Global Positioning System (GPS). This is
NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate.
     <field name="usec" type="uint64_t">Timestamp (microseconds since unix epoch)</field>
     <field name="satellites_visible"   type="uint8_t">Number of satellites visible</field>
     <field name="satellite_prn"   type="array[20]">Global satellite ID</field>
     <field name="satellite_used"   type="array[20]">0: Satellite not used, 1: used for localization</field>
     <field name="satellite_elevation"   type="array[20]">Elevation (0: right on top of receiver, 90: on the horizon) of satellite</field>
     <field name="satellite_azimuth"  type="array[20]">Direction of satellite, 0: 0 deg, 255: 360 deg.</field>
     <field name="satellite_snr"  type="array[20]">Signal to noise ratio of satellite</field>
   </message>

   <message name="GLOBAL_POSITION" id="33">
     The filtered global position (e.g. fused GPS and accelerometers).
     <field name="usec" type="uint64_t">Timestamp (microseconds since unix epoch)</field>
     <field name="lat"   type="float">X Position</field>
     <field name="lon"   type="float">Y Position</field>
     <field name="alt"   type="float">Z Position</field>
     <field name="vx"  type="float">X Speed</field>
     <field name="vy"  type="float">Y Speed</field>
     <field name="vz"  type="float">Z Speed</field>
   </message>

   <message name="SYS_STATUS" id="34">
     The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows wether the system is currently active or not and if an emergency occured. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occured it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.
     <field name="mode" type="uint8_t">System mode, see MAV_MODE ENUM in mavlink/include/mavlink_types.h</field>
     <field name="nav_mode" type="uint8_t">Navigation mode, see MAV_NAV_MODE ENUM</field>
     <field name="status" type="uint8_t">System status flag, see MAV_STATUS ENUM</field>
     <field name="vbat" type="uint16_t">Battery voltage, in millivolts (1 = 1 millivolt)</field>
     <field name="motor_block" type="uint8_t">Motor block status flag, 0: Motors can be switched on (and could be either off or on), 1: Mechanical motor block switch is on, motors cannot be switched on (and are definitely off)</field>
     <field name="packet_drop" type="uint16_t">Dropped packets (packets that were corrupted on reception on the MAV)</field>
   </message>

   <message name="RC_CHANNELS_RAW" id="35">
     The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
     <field name="chan1" type="uint16_t">RC channel 1 value, in microseconds</field>
     <field name="chan2" type="uint16_t">RC channel 2 value, in microseconds</field>
     <field name="chan3" type="uint16_t">RC channel 3 value, in microseconds</field>
     <field name="chan4" type="uint16_t">RC channel 4 value, in microseconds</field>
     <field name="chan5" type="uint16_t">RC channel 5 value, in microseconds</field>
     <field name="chan6" type="uint16_t">RC channel 6 value, in microseconds</field>
     <field name="chan7" type="uint16_t">RC channel 7 value, in microseconds</field>
     <field name="chan8" type="uint16_t">RC channel 8 value, in microseconds</field>
   </message>

   <message name="RC_CHANNELS_TRIM_SET" id="36">
     Trim values to scale the RAW RC channel values. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification. The channels are normalized using these trim values, which ensures that the full range of the remote can be used. Using this parameter also different remotes can be used with the same MAV without re-trimming the remote after changing.
     <field name="chan1_min" type="uint16_t">RC channel 1 min value, in microseconds</field>
     <field name="chan1_zero" type="uint16_t">RC channel 1 zero value, in microseconds</field>
     <field name="chan1_max" type="uint16_t">RC channel 1 max value, in microseconds</field>
     <field name="chan2_min" type="uint16_t">RC channel 2 min value, in microseconds</field>
     <field name="chan2_zero" type="uint16_t">RC channel 2 zero value, in microseconds</field>
     <field name="chan2_max" type="uint16_t">RC channel 2 max value, in microseconds</field>
     <field name="chan3_min" type="uint16_t">RC channel 3 min value, in microseconds</field>
     <field name="chan3_zero" type="uint16_t">RC channel 3 zero value, in microseconds</field>
     <field name="chan3_max" type="uint16_t">RC channel 3 max value, in microseconds</field>
     <field name="chan4_min" type="uint16_t">RC channel 4 min value, in microseconds</field>
     <field name="chan4_zero" type="uint16_t">RC channel 4 zero value, in microseconds</field>
     <field name="chan4_max" type="uint16_t">RC channel 4 max value, in microseconds</field>
     <field name="chan5_min" type="uint16_t">RC channel 5 min value, in microseconds</field>
     <field name="chan5_zero" type="uint16_t">RC channel 5 zero value, in microseconds</field>
     <field name="chan5_max" type="uint16_t">RC channel 5 max value, in microseconds</field>
   </message>

   <message name="RC_CHANNELS_MAPPING" id="37">
     Mapping defining which functions each RC channel has
     <field name="chan1_function" type="uint8_t">RC channel 1 function, as defined in ENUM MAVLINK_RC_CHAN_MAPPING in mavlink/include/mavlink_types.h</field>
     <field name="chan2_function" type="uint8_t">RC channel 2 function, as defined in ENUM MAVLINK_RC_CHAN_MAPPING in mavlink/include/mavlink_types.h</field>
     <field name="chan3_function" type="uint8_t">RC channel 3 function, as defined in ENUM MAVLINK_RC_CHAN_MAPPING in mavlink/include/mavlink_types.h</field>
     <field name="chan4_function" type="uint8_t">RC channel 4 function, as defined in ENUM MAVLINK_RC_CHAN_MAPPING in mavlink/include/mavlink_types.h</field>
     <field name="chan5_function" type="uint8_t">RC channel 5 function, as defined in ENUM MAVLINK_RC_CHAN_MAPPING in mavlink/include/mavlink_types.h</field>
   </message>

   <message name="RC_CHANNELS_MAPPING_SET" id="38">
     Set the mapping of the individual RC channels. This allows to re-map the RC channels of a remote control roll/pitch/yaw thrust, etc.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="chan1_function" type="uint8_t">RC channel 1 function, as defined in ENUM MAVLINK_RC_CHAN_MAPPING in mavlink/include/mavlink_types.h</field>
     <field name="chan2_function" type="uint8_t">RC channel 2 function, as defined in ENUM MAVLINK_RC_CHAN_MAPPING in mavlink/include/mavlink_types.h</field>
     <field name="chan3_function" type="uint8_t">RC channel 3 function, as defined in ENUM MAVLINK_RC_CHAN_MAPPING in mavlink/include/mavlink_types.h</field>
     <field name="chan4_function" type="uint8_t">RC channel 4 function, as defined in ENUM MAVLINK_RC_CHAN_MAPPING in mavlink/include/mavlink_types.h</field>
     <field name="chan5_function" type="uint8_t">RC channel 5 function, as defined in ENUM MAVLINK_RC_CHAN_MAPPING in mavlink/include/mavlink_types.h</field>
   </message>

   <message name="WAYPOINT" id="39">
     Message encoding a waypoint. This message is emitted to announce
     the presence of a waypoint. It cannot be used to set a waypoint, use WAYPOINT_SET for this purpose. The waypoint can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon. The global and body frame are related as: positive Z-down, positive X(front looking north, positive Y(body:right) looking east. Therefore x encodes in global mode the latitude, whereas y encodes the longitude and z the altitude over ground.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="seq" type="uint16_t">Sequence</field>
     <field name="type" type="uint8_t">0: global (GPS), 1: local, 2: global orbit, 3: local orbit</field>
     <field name="orbit" type="float">Orbit to circle around the waypoint, in meters</field>
     <field name="hold_time" type="uint32_t">Time that the MAV should stay inside the orbit before advancing, in milliseconds</field>
     <field name="current" type="uint8_t">false:0, true:1</field>
     <field name="x" type="float">local: x position, global: latitude</field>
     <field name="y" type="float">y position: global: longitude</field>
     <field name="z" type="float">z position: global: altitude</field>
     <field name="yaw" type="float">yaw orientation in radians, 0 = NORTH</field>
     <field name="autocontinue" type="uint16_t">autocontinue to next wp</field>
   </message>

   <message name="WAYPOINT_SET" id="40">
     Message setting a waypoint. The waypoint can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon. The global and body frame are related as: positive Z-down, positive X(front looking north, positive Y(body:right) looking east. Therefore x encodes in global mode the latitude, whereas y encodes the longitude and z the altitude over ground.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="seq" type="uint16_t">Sequence</field>
     <field name="type" type="uint8_t">0: global (GPS), 1: local, 2: global orbit, 3: local orbit</field>
     <field name="orbit" type="float">Orbit to circle around the waypoint, in meters</field>
     <field name="hold_time" type="uint32_t">Time that the MAV should stay inside the orbit before advancing, in milliseconds</field>
     <field name="current" type="uint8_t">false:0, true:1</field>
     <field name="x" type="float">local: x position, global: latitude</field>
     <field name="y" type="float">y position: global: longitude</field>
     <field name="z" type="float">z position: global: altitude</field>
     <field name="yaw" type="float">yaw orientation in radians, 0 = NORTH</field>
     <field name="autocontinue" type="uint16_t">autocontinue to next wp</field>
   </message>

   <message name="WAYPOINT_REQUEST" id="41">
     Request the information of the waypoint with the sequence number seq. The response of the system to this message should be a WAYPOINT message.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="seq" type="uint16_t">Sequence</field>
   </message>

  <message name="WAYPOINT_SET_CURRENT" id="42">
     Set the waypoint with sequence number seq as current waypoint. This means that the MAV will continue to this waypoint on the shortest path (not following the waypoints in-between).
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="seq" type="uint16_t">Sequence</field>
   </message>

  <message name="WAYPOINT_REQUEST_LIST" id="43">
     Request the overall list of waypoints from the system/component.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
   </message>

   <message name="WAYPOINT_COUNT" id="44">
     This message is emitted as response to WAYPOINT_REQUEST_LIST by the MAV. The GCS can then request the individual waypoints based on the knowledge of the total number of waypoints.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="count" type="uint16_t">Number of Waypoints in the Sequence</field>
   </message>

  <message name="WAYPOINT_CLEAR_ALL" id="45">
     Delete all waypoints at once.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
   </message>

   <message name="WAYPOINT_REACHED" id="46">
     A certain waypoint has been reached. The system will either hold this position (or circle on the orbit) or (if the autocontinue on the WP was set) continue to the next waypoint.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="seq" type="uint16_t">Sequence</field>
   </message>

   <message name="WAYPOINT_ERROR" id="47">
     Error during waypoint handling. FIXME Description of error states
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="type" type="uint8_t">0: OK, 1: Error</field>
   </message>

   <message name="WAYPOINT_SET_GLOBAL_REFERENCE" id="48">
     As local waypoints exist, the global waypoint reference allows to transform between the local coordinate frame and the global (GPS) coordinate frame. This can be necessary when e.g. in- and outdoor settings are connected and the MAV should move from in- to outdoor.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="global_x" type="float">global x position</field>
     <field name="global_y" type="float">global y position</field>
     <field name="global_z" type="float">global z position</field>
     <field name="global_yaw" type="float">global yaw orientation in radians, 0 = NORTH</field>
     <field name="local_x" type="float">local x position that matches the global x position</field>
     <field name="local_y" type="float">local y position that matches the global y position</field>
     <field name="local_z" type="float">local z position that matches the global z position</field>
     <field name="local_yaw" type="float">local yaw that matches the global yaw orientation</field>
   </message>

   <message name="SAFETY_SET_ALLOWED_AREA" id="49">
     Set a safety zone, which is defined by two corners of a cube. This message can be used to tell the MAV which setpoints/waypoints to accept and which to reject. Safety areas are often enforced by national or competition regulations.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="type" type="uint8_t">0: global (GPS), 1: local</field>
     <field name="x1" type="float">x position 1</field>
     <field name="y1" type="float">y position 1</field>
     <field name="z1" type="float">z position 1</field>
     <field name="x2" type="float">x position 2</field>
     <field name="y2" type="float">y position 2</field>
     <field name="z2" type="float">z position 2</field>
   </message>

   <message name="LOCAL_POSITION_SETPOINT_SET" id="50">
     Set the setpoint for a local position controller. This is the position in local coordinates the MAV should fly to. This message is sent by the path/waypoint planner to the onboard position controller. As some MAVs have a degree of freedom in yaw (e.g. all helicopters/quadrotors), the desired yaw angle is part of the message.
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="x" type="float">x position 1</field>
     <field name="y" type="float">y position 1</field>
     <field name="z" type="float">z position 1</field>
     <field name="yaw" type="float">x position 2</field>
   </message>

   <message name="LOCAL_POSITION_SETPOINT" id="51">
     Transmit the current local setpoint of the controller to other MAVs (collision avoidance) and to the GCS.
     <field name="x" type="float">x position 1</field>
     <field name="y" type="float">y position 1</field>
     <field name="z" type="float">z position 1</field>
     <field name="yaw" type="float">x position 2</field>
   </message>

   <message name="ATTITUDE_CONTROLLER_OUTPUT" id="60">
     The output of the attitude controller. This output is the control response the controller currently generates and the attitude the MAV would take if it is under control of the attitude controller. The primary use of this message is to check the response and signs of the controller before the actual flight.
     <field name="enabled" type="uint8_t">1: enabled, 0: disabled</field>
     <field name="roll" type="int8_t">Attitude roll: -128: -100%, 127: +100%</field>
     <field name="pitch" type="int8_t">Attitude pitch: -128: -100%, 127: +100%</field>
     <field name="yaw" type="int8_t">Attitude yaw: -128: -100%, 127: +100%</field>
     <field name="thrust" type="int8_t">Attitude thrust: -128: -100%, 127: +100%</field>
   </message>

   <message name="POSITION_CONTROLLER_OUTPUT" id="61">
     The output of the position controller. The primary use of this message is to check the response and signs of the controller before the actual flight.
     <field name="enabled" type="uint8_t">1: enabled, 0: disabled</field>
     <field name="x" type="int8_t">Position x: -128: -100%, 127: +100%</field>
     <field name="y" type="int8_t">Position y: -128: -100%, 127: +100%</field>
     <field name="z" type="int8_t">Position z: -128: -100%, 127: +100%</field>
     <field name="yaw" type="int8_t">Position yaw: -128: -100%, 127: +100%</field>
   </message>
   
   <!-- MESSAGE IDs 80 - 250: Space for custom messages in individual projectname_messages.xml files -->

  <message name="STATUSTEXT" id= "254">
    Status text message. These messages are printed in yellow in the COMM console of QGroundControl. They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).
    <field name="severity" type="uint8_t">Severity of status, 0 = info message, 255 = critical fault</field>
    <field name="text" type="array[50]">Status text message, without null termination character</field>
   </message>


<message name="DEBUG" id="255">
     Send a debug value. The index is used to discriminate between values. These values show up in the plot of QGroundControl as DEBUG N.
     <field name="ind"  type="uint8_t">index of debug variable</field>
     <field name="value"  type="float">DEBUG value</field>
   </message>

</messages>
</mavlink>
